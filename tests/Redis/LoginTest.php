<?php

namespace RedStor\Tests\Redis;

use RedStor\Tests\RedStorTest;
use ⌬\Tests\Traits\FakeDataTrait;
use ⌬\UUID\UUID;

/**
 * @internal
 * @coversNothing
 */
class LoginTest extends RedStorTest
{
    use FakeDataTrait;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        self::assertDemoAccount($this->redis);
    }

    public function testLoginGood()
    {
        $this->assertTrue(
            $this->redis->login(self::DEMO_APP, self::DEMO_USERNAME, self::DEMO_PASSWORD)
        );
        $this->assertEquals('OK', $this->redis->set('test:'.UUID::v4(), 'Try to set a key in this logged-in-state'));
    }

    public function testLoginBadInvalidPassword()
    {
        $this->assertFalse(
            $this->redis->login(self::DEMO_APP, self::DEMO_USERNAME, $this->faker()->password)
        );
        $this->assertEquals('-FAIL', $this->redis->set('test:'.UUID::v4(), 'Try to set a key in this logged-in-state'));
    }

    public function testLoginBadInvalidUsername()
    {
        $this->assertFalse(
            $this->redis->login(self::DEMO_APP, $this->faker()->userName, self::DEMO_PASSWORD)
        );
        $this->assertEquals('-FAIL', $this->redis->set('test:'.UUID::v4(), 'Try to set a key in this logged-in-state'));
    }

    public function testLoginBadInvalidAppName()
    {
        $this->assertFalse(
            $this->redis->login($this->faker()->company, self::DEMO_USERNAME, self::DEMO_PASSWORD)
        );
        $this->assertEquals('-FAIL', $this->redis->set('test:'.UUID::v4(), 'Try to set a key in this logged-in-state'));
    }
}
